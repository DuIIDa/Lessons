#include <iostream>
#include <vector>
#include <iomanip>
#include <string>
#include <fstream>
#include <sstream>

using namespace std;

struct Minecraft {
	string name, license, version, numberPl, ip; 
} server;


void Func1(Minecraft* servers);
void Search(Minecraft* servers);
void new_DB(vector<Minecraft>& x);
void load_DB(vector<Minecraft>& x, Minecraft* servers);
void remove_DB(vector<Minecraft>& x, int NUM, Minecraft* servers);
void clear(vector<Minecraft>& x);
void delete_DB();

int main() {
	setlocale(LC_ALL, "Rus");
	Minecraft* p;
	p = &server;
	vector <Minecraft> servers;
	string search;
	int c = 0;

	char answer=' ';
	int choice;

	do
	{
		std::cout << "Действия: " << endl;
		std::cout << "1. Добавить сервер." << endl;
		std::cout << "2. Просмотреть список." << endl;
		std::cout << "3. Поиск сервера." << endl;
		std::cout << "4. Создать/обновить файл." << endl;
		std::cout << "5. Удалить сервер." << endl;
		std::cout << "6. Очистить список серверов." << endl;
		std::cout << "7. Загрузить данные из файла." << endl;
		std::cout << "8. Удалить файл." << endl;
		std::cout << "9. Выход." << endl;

		std::cin >> choice;

		switch (choice) {
		case 1:
			system("cls");
			Func1(p);
			servers.push_back(server);
			break;

		case 2:
			system("cls");
			if (servers.size() == 0) {
				cout << "Список серверов пуст." << endl;
				break;
			}
			
			cout.setf(ios::left);
			cout.width(22);
			cout << setw(22) << "Название сервера" << setw(22) << "Лицензия" << setw(22) << "Версия" << setw(22) << "IP адрес" << setw(22) << "Кол-во игроков" << endl;
			for (int i = 0; i < servers.size(); i++)
			{
				cout << setw(22) << servers[i].name << setw(22) << servers[i].license << setw(22) << servers[i].version << setw(22) << servers[i].ip << setw(22) << servers[i].numberPl << endl;
			}
			break;

		case 3:
			system("cls");
			if (servers.size() == 0) {
				cout << "Список серверов пуст." << endl;
				break;
			}
			cout << "Введите название сервера" << endl;
			cin.ignore();
			cin.clear();
			cin >> search;
			
			for (int i = 0; i < servers.size(); i++) {
				if (servers[i].name == search) {
					p = &servers[i];
					Search(p);
					c++;
				}
			}
			if (c == 0) {
				cout << "Такого сервера нет." << endl;
				break;
			}
			else c = 0;
			break;

		case 4: 
			system("cls");
			new_DB(servers);
			break;
		
		case 5: 
			system("cls");
			if (servers.size() == 0) {
				cout << "Список серверов пуст." << endl;
				break;
			}
			cout << "Введите название сервера" << endl;
			cin.ignore();
			cin.clear();
			cin >> search;

			for (int i = 0; i < servers.size(); i++) {
				if (servers[i].name == search) {
					int num = i;
					p = &servers[i];
					remove_DB(servers, i, p);
					c++;
				}
			}
			if (c == 0) {
				cout << "Такого сервера нет." << endl;
				break;
			}
			else c = 0;
			break;

		case 6:
			system("cls");
			if (servers.size() == 0) {
				cout << "Список серверов пуст." << endl;
				break;
			}
			clear(servers);
			break;

		case 7: {
			system("cls");
			load_DB(servers, p);
		
			break;
		}

		case 8:
			system("cls");
			delete_DB();
			break;
		
		case 9:
			return 0;
			break;

		default:
			system("cls");
			cout << "Такого действия нет" << endl;
			break;
		}
		cout << "На главную (Да / Нет)";
			cin >> answer;
			if (answer == 'N' || answer == 'n')
				return 0;
			system("cls");
	} while (answer == 'y' || answer == 'Y');
}
	void Func1(Minecraft* servers) {
		string n, l, v, nPl, Ip; 

		cout << "Введите название: ";
		cin.ignore();
		cin.clear();
		getline(cin, n);
		servers->name = n;

		cout << "Наличие лицензии: ";
		cin.clear();
		getline(cin, l);
		servers->license = l;

		cout << "Версия: ";
		cin.clear();
		cin >> v;
		servers->version = v;
		
		cout << "Кол-во игроков: ";
		cin.clear();
		cin >> nPl;
		servers->numberPl = nPl;
	
		cout << "IP адрес: ";
		cin.clear();
		cin >> Ip;
		servers->ip = Ip;	


	}

	void Search(Minecraft* servers) {
		cout << endl << "Результат поиска:\n";
		cout << endl;
		cout << "Название: " << servers->name << endl;
		cout << "Наличие лицензии: " << servers->license << endl;
		cout << "IP адрес: " << servers->ip << endl;
		cout << "Количество игроков: " << servers->numberPl << endl;
		cout << "Версия: " << servers->version << endl;
		cout << endl;
	}

	void new_DB (vector<Minecraft> &x) {
		ofstream TXTFile("D:\TXTFile.txt");
		ofstream TXTMain("D:\TXTMain.txt");
		if (TXTFile.is_open()) {
			if (x.size() == 0) {
				cout << "Список серверов пуст." << endl;
				TXTFile << "Список серверов пуст.";
			}
			else {
				TXTFile.setf(ios::left);
				TXTFile.width(22);
				TXTFile << setw(22) << "Название сервера" << setw(22) << "Лицензия" << setw(22) << "Версия" << setw(22) << "IP адрес" << setw(22) << "Кол-во игроков" << endl;
				for (int i = 0; i < x.size(); i++)
				{
					TXTFile << setw(22) << x[i].name << setw(22) << x[i].license << setw(22) << x[i].version << setw(22) << x[i].ip << setw(22) << x[i].numberPl << endl;
				}
				TXTFile.close();
				cout << "Файл успешно создан/обновлен." << endl;

			}
		}
		else {
			cout << "Произошла ошибка" << endl;
		}
		
		for (int i = 0; i < x.size(); i++)
		{
			TXTMain << x[i].name << endl;
			TXTMain << x[i].license << endl;
			TXTMain << x[i].version << endl;
			TXTMain << x[i].ip << endl;
			TXTMain << x[i].numberPl << endl << endl;
		}
		TXTMain.close();
	}
	void remove_DB(vector<Minecraft>& x, int NUM, Minecraft* servers) {
		string answer;
		cout << endl << "Результат поиска:\n";
		cout << endl;
		cout << "Название: " << servers->name << endl;
		cout << "Наличие лицензии: " << servers->license << endl;
		cout << "IP адрес: " << servers->ip << endl;
		cout << "Количество игроков: " << servers->numberPl << endl;
		cout << "Версия: " << servers->version << endl;
		cout << endl << "Вы уверены, что хотите удалить сервер? ";
		cin >> answer;
		if (answer == "Y" || answer == "y") {
			system("cls");
			x.erase(x.begin() + NUM);
			cout <<"Сервер успешно удален.\n";
			cout << endl;
		}
	}

	void clear(vector<Minecraft>& x) {
		string answer;
		cout << "Вы уверены, что хотите удалить все сервера? ";
		cin >> answer;
		if (answer == "Y" || answer == "y") {
			x.clear();
			cout << endl << "Все сервера успешно удалены.\n";
			cout << endl;
		}
		
	}

	void load_DB(vector <Minecraft>& x, Minecraft* servers)
	{
		ifstream TXTMain("D:/TXTMain.txt");
		if (!TXTMain.is_open())
		{
			cout << "Файл не может быть открыт!\n";
			exit(0);
		}
		else
		{
			while (!TXTMain.eof())
			{
				string str;

				getline(TXTMain, str);
				if (str == "\0")
				{
					break;
				}
				servers->name = str;

				getline(TXTMain, str);
				servers->license = str;

				getline(TXTMain, str);
				servers->version = str;

				getline(TXTMain, str);
				servers->ip = str;

				getline(TXTMain, str);
				servers->numberPl = str;

				getline(TXTMain, str);

				x.push_back(server);
			}
			cout << "Операция выполнена успешно!" << endl;
			TXTMain.close();
		}
	}

	void delete_DB() {
		string answer;
		cout << "Вы уверены, что хотите удалить файл? ";
		cin >> answer;
		if (answer == "Y" || answer == "y") {
			if (remove("D:\TXTFile.txt") != 0) {
				cout << "Произошла ошибка." << endl;
			}
			else {
				cout << "Файл успешно удален." << endl;
			}
			remove("D:\TXTMain.txt");
		}
	}